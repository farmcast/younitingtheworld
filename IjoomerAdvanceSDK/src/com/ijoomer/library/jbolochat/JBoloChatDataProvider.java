package com.ijoomer.library.jbolochat;import android.content.Context;import android.os.AsyncTask;import com.ijoomer.caching.IjoomerCaching;import com.ijoomer.common.classes.IjoomerPagingProvider;import com.ijoomer.components.jbolochat.JBoloChatManager;import com.ijoomer.weservice.IjoomerWebService;import com.ijoomer.weservice.ProgressListener;import com.ijoomer.weservice.WebCallListener;import com.ijoomer.src.R;import org.json.JSONObject;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedList;import java.util.List;/** * This Class Contains All Method Related To JBoloChatDataProvider. * * @author tasol * */public class JBoloChatDataProvider extends IjoomerPagingProvider {    private Context mContext;    private boolean isCalling = false;    private final String MESSAGE = "message";    private final String POLLING = "polling";    private final String ICHATMAIN = "ichatmain";    private final String INITIATENODE = "initiateNode";    private final String ADDNODEUSER = "addNodeUser";    private final String PUSHCHATTONODE = "pushChatToNode";    private final String CHATHISTORY = "chatHistory";    private final String LEAVECHAT = "leavechat";    private final String CHANGESTATUS = "changeStatus";    private final String GETGROUPPARTICIPANTS = "getgroupParticipants";    private final String UPLOADFILE = "uploadFile";    private final String PID = "pid";    private final String NID = "nid";    private final String STATUSMSG = "statusMsg";    private final String STATUS = "status";    private final String TYPE = "Type";    private final String FROMNAME = "fromName";    private final String NODEID = "nodeID";    private final String USERNAME = "userName";    private final String USERID = "userId";    public  final String JBOLOONLINEUSERTABLENAME = "jboloOnlineUser";    public  final String JBOLOMESSAGETABLENAME = "jboloMessage";    private final String FILES = "files";    private final String USERS = "users";    private final String MESSAGES = "messages";    /**     * Constructor     *     * @param mContext     *            represented {@link android.content.Context}     */    public JBoloChatDataProvider(Context mContext) {        super(mContext);        this.mContext = mContext;    }    /**     * This method used to check provider execute any request call.     *     * @return {@link boolean}     */    public boolean isCalling() {        return isCalling;    }    /**     * This method used to polling     * @param target represented {@link com.ijoomer.weservice.WebCallListener}     */    public void polling(final WebCallListener target) {        if (!isCalling) {            isCalling = true;            new AsyncTask<Void, Void, Object>() {                IjoomerCaching ijoomerCaching = new IjoomerCaching(mContext);                @Override                protected Object doInBackground(Void... params) {                    IjoomerWebService iw = new IjoomerWebService();                    iw.reset();                    iw.addWSParam(EXTNAME, JBOLOCHAT);                    iw.addWSParam(EXTVIEW, ICHATMAIN);                    iw.addWSParam(EXTTASK, POLLING);                    iw.WSCall(new ProgressListener() {                        @Override                        public void transferred(long num) {                            if (num >= 100) {                                target.onProgressUpdate(95);                            } else {                                target.onProgressUpdate((int) num);                            }                        }                    });                    List<String> pushList = new LinkedList<String>();                    if (validateResponse(iw.getJsonObject())) {                        try{                            pushList.addAll(preparePushUser(ijoomerCaching.parseData(iw.getJsonObject().getJSONArray(USERS))));                        }catch (Throwable e){                            pushList.addAll(preparePushUser(null));                            e.printStackTrace();                        }                        try{                            pushList.addAll(preparePushMessage(ijoomerCaching.parseData(iw.getJsonObject().getJSONArray(MESSAGES)), JBoloChatManager.getInstance(mContext).getCurrentChatId()));                        }catch (Throwable e){                            pushList.addAll(preparePushMessage(null,"0"));                            e.printStackTrace();                        }                        try{                            ijoomerCaching.cacheData(iw.getJsonObject().getJSONArray(USERS), true, JBOLOONLINEUSERTABLENAME);                        }catch (Throwable e){                            ijoomerCaching.droapTable(JBOLOONLINEUSERTABLENAME);                            e.printStackTrace();                        }                        try{                            ijoomerCaching.cacheData(iw.getJsonObject().getJSONArray(MESSAGES),false, JBOLOMESSAGETABLENAME);                        }catch (Throwable e){                            e.printStackTrace();                        }                    }                    return pushList;                }                @Override                protected void onPostExecute(Object result) {                    super.onPostExecute(result);                    isCalling = false;                    target.onProgressUpdate(100);                    target.onCallComplete(getResponseCode(), getErrorMessage(), null, result);                }            }.execute();        }else{            target.onProgressUpdate(100);            target.onCallComplete(123, null, null, null);        }    }    /**     * This method used to prepare user push.     * @param users represented user data     * @return represented {@link java.util.LinkedList<String>}     */    private List<String> preparePushUser(ArrayList<HashMap<String, String>> users){        List<String> pushUsers = new LinkedList<String>();        pushUsers.addAll(pushFindOfflineUser(users));        pushUsers.addAll(pushFindOnlineUser(users));        pushUsers.addAll(pushFindStatusUpdateUser(users));        return pushUsers;    }    /**     * This method used to find offline user for push.     * @param users represented user data     * @return represented {@link java.util.LinkedList<String>}     */    private List<String> pushFindOfflineUser(ArrayList<HashMap<String,String>> users){        List<String> offlineUser = new LinkedList<String>();        if(users==null){            try{                IjoomerCaching caching = new IjoomerCaching(mContext);                ArrayList<HashMap<String,String>> user = caching.getDataFromCache(JBOLOONLINEUSERTABLENAME,"select "+USERNAME+" from "+ JBOLOONLINEUSERTABLENAME);                if(user!=null){                    for (HashMap<String,String> data : user){                        offlineUser.add(data.get(USERNAME)+" "+mContext.getString(R.string.jbolo_chat_is_now_offline));                    }                }            }catch (Throwable e){                e.printStackTrace();            }        }else{            String userId="";            for (HashMap<String,String> row : users){                userId+="'"+row.get(USERID)+"',";            }            userId = userId.substring(0,userId.length()-1);            try{                IjoomerCaching caching = new IjoomerCaching(mContext);                ArrayList<HashMap<String,String>> user = caching.getDataFromCache(JBOLOONLINEUSERTABLENAME,"select "+USERNAME+" from "+ JBOLOONLINEUSERTABLENAME +" where "+USERID+" not in("+userId+")");                if(user!=null){                    for (HashMap<String,String> data : user){                        offlineUser.add(data.get(USERNAME)+" "+mContext.getString(R.string.jbolo_chat_is_now_offline));                    }                }            }catch (Throwable e){                e.printStackTrace();            }        }        return offlineUser;    }    /**     * This method used to search user for group invitation from DB.     * @param participantsId represented group already participants id     * @param searchKeyWord represented search keyword     * @return represented {link ArrayList<HashMap<String,String>>}     */    public ArrayList<HashMap<String,String>> searchUserForGroupInvitation(String participantsId,String searchKeyWord){            try{                IjoomerCaching caching = new IjoomerCaching(mContext);                return caching.getDataFromCache(JBOLOONLINEUSERTABLENAME,"select * from "+ JBOLOONLINEUSERTABLENAME +" where "+USERID+" not in("+participantsId+") and "+USERNAME+" like '%"+searchKeyWord+"%'");            }catch (Throwable e){                e.printStackTrace();            }        return  null;    }    /**     * This method used to find online user for push.     * @param users represented user data     * @return represented {@link java.util.LinkedList<String>}     */    private List<String> pushFindOnlineUser(ArrayList<HashMap<String,String>> users){        List<String> onlineUser = new LinkedList<String>();        try{            IjoomerCaching caching = new IjoomerCaching(mContext);            for (HashMap<String,String> row : users){                ArrayList<HashMap<String,String>> user = caching.getDataFromCache(JBOLOONLINEUSERTABLENAME,"select "+USERNAME+" from "+ JBOLOONLINEUSERTABLENAME +" where "+USERID+" in("+row.get(USERID)+")");                if(user==null || user.size()<=0){                    onlineUser.add(row.get(USERNAME)+" "+mContext.getString(R.string.jbolo_chat_is_now_online));                }            }        }catch (Throwable e){            e.printStackTrace();        }        return onlineUser;    }    /**     * This method used to find update user status for push.     * @param users represented user data     * @return represented {@link java.util.LinkedList<String>}     */    private List<String> pushFindStatusUpdateUser(ArrayList<HashMap<String,String>> users){        List<String> statusUpdate = new LinkedList<String>();        try{            IjoomerCaching caching = new IjoomerCaching(mContext);            for (HashMap<String,String> row : users){                ArrayList<HashMap<String,String>> user = caching.getDataFromCache(JBOLOONLINEUSERTABLENAME,"select "+USERNAME+" from "+ JBOLOONLINEUSERTABLENAME +" where "+USERID+" in("+row.get(USERID)+") and "+STATUS+" <>'"+row.get(STATUS)+"'");                if(user!=null && user.size()>0){                    if(row.get(STATUS).equals("1")){                        statusUpdate.add(row.get(USERNAME)+" "+mContext.getString(R.string.jbolo_chat_is_now_availabel));                    }else if(row.get(STATUS).equals("2")){                        statusUpdate.add(row.get(USERNAME)+" "+mContext.getString(R.string.jbolo_chat_is_now_busy));                    }else if(row.get(STATUS).equals("3")){                        statusUpdate.add(row.get(USERNAME)+" "+mContext.getString(R.string.jbolo_chat_is_now_away));                    }                }            }        }catch (Throwable e){            e.printStackTrace();        }        return statusUpdate;    }    /**     * This method used to prepare push messages.     * @param messages represented messages data     * @param currentChatId represented current chat id which excluded from push     * @return represented {@link java.util.LinkedList<String>}     */    private List<String> preparePushMessage(ArrayList<HashMap<String,String>> messages,String currentChatId){        List<String> pushMessageList = new LinkedList<String>();        try{            for (HashMap<String,String>message : messages){                if(!message.get(NODEID).equals(currentChatId)){                    if(message.get(TYPE).equals("2")){                        pushMessageList.add(mContext.getString(R.string.jbolo_chat_group_chat)+"="+mContext.getString(R.string.jbolo_chat_sent_you_message)+"="+message.get(NODEID)+"="+message.get(TYPE));                    }else{                        pushMessageList.add(message.get(FROMNAME)+"="+mContext.getString(R.string.jbolo_chat_sent_you_message)+"="+message.get(NODEID)+"="+message.get(TYPE));                    }                }            }        }catch (Throwable e){            e.printStackTrace();        }        return pushMessageList;    }    /**     * This method used to get node id.     * @param pId represented receiver user id     * @param target represented {@link com.ijoomer.weservice.WebCallListener}     */    public void getNodeId(final String pId,final WebCallListener target) {        new AsyncTask<Void, Void, ArrayList<HashMap<String, String>>>() {            IjoomerCaching ijoomerCaching = new IjoomerCaching(mContext);            @Override            protected ArrayList<HashMap<String, String>> doInBackground(Void... params) {                IjoomerWebService iw = new IjoomerWebService();                iw.reset();                iw.addWSParam(EXTNAME, JBOLOCHAT);                iw.addWSParam(EXTVIEW, ICHATMAIN);                iw.addWSParam(EXTTASK, INITIATENODE);                JSONObject taskData = new JSONObject();                try {                    taskData.put(PID, pId);                } catch (Throwable e) {                }                iw.addWSParam(TASKDATA, taskData);                iw.WSCall(new ProgressListener() {                    @Override                    public void transferred(long num) {                        if (num >= 100) {                            target.onProgressUpdate(95);                        } else {                            target.onProgressUpdate((int) num);                        }                    }                });                if (validateResponse(iw.getJsonObject())) {                    try{                        return ijoomerCaching.parseData(iw.getJsonObject());                    }catch (Throwable e){                        e.printStackTrace();                    }                }                return null;            }            @Override            protected void onPostExecute(ArrayList<HashMap<String, String>> result) {                super.onPostExecute(result);                isCalling = false;                target.onProgressUpdate(100);                target.onCallComplete(getResponseCode(), getErrorMessage(), result, null);            }        }.execute();    }    /**     * This method used to invite user for group chat.     * @param nid represented node id     * @param pId represented invite user id     * @param target represented {@link com.ijoomer.weservice.WebCallListener}     */    public void inviteUser(final String nid,final String pId,final WebCallListener target) {        new AsyncTask<Void, Void, ArrayList<HashMap<String, String>>>() {            IjoomerCaching ijoomerCaching = new IjoomerCaching(mContext);            @Override            protected ArrayList<HashMap<String, String>> doInBackground(Void... params) {                IjoomerWebService iw = new IjoomerWebService();                iw.reset();                iw.addWSParam(EXTNAME, JBOLOCHAT);                iw.addWSParam(EXTVIEW, ICHATMAIN);                iw.addWSParam(EXTTASK, ADDNODEUSER);                JSONObject taskData = new JSONObject();                try {                    taskData.put(PID, pId);                    taskData.put(NID, nid);                } catch (Throwable e) {                }                iw.addWSParam(TASKDATA, taskData);                iw.WSCall(new ProgressListener() {                    @Override                    public void transferred(long num) {                        if (num >= 100) {                            target.onProgressUpdate(95);                        } else {                            target.onProgressUpdate((int) num);                        }                    }                });                if (validateResponse(iw.getJsonObject())) {                    try{                        return ijoomerCaching.parseData(iw.getJsonObject());                    }catch (Throwable e){                        e.printStackTrace();                    }                }                return null;            }            @Override            protected void onPostExecute(ArrayList<HashMap<String, String>> result) {                super.onPostExecute(result);                isCalling = false;                target.onProgressUpdate(100);                target.onCallComplete(getResponseCode(), getErrorMessage(), result, null);            }        }.execute();    }    /**     * This method used to send chat.     * @param nId represented node id     * @param message represented message     * @param target represented {@link com.ijoomer.weservice.WebCallListener}     */    public void sendChat(final String nId,final String message,final WebCallListener target) {        new AsyncTask<Void, Void, ArrayList<HashMap<String, String>>>() {            IjoomerCaching ijoomerCaching = new IjoomerCaching(mContext);            @Override            protected ArrayList<HashMap<String, String>> doInBackground(Void... params) {                IjoomerWebService iw = new IjoomerWebService();                iw.reset();                iw.addWSParam(EXTNAME, JBOLOCHAT);                iw.addWSParam(EXTVIEW, ICHATMAIN);                iw.addWSParam(EXTTASK, PUSHCHATTONODE);                JSONObject taskData = new JSONObject();                try {                    taskData.put(NID, nId);                    taskData.put(MESSAGE, message);                } catch (Throwable e) {                }                iw.addWSParam(TASKDATA, taskData);                iw.WSCall(new ProgressListener() {                    @Override                    public void transferred(long num) {                        if (num >= 100) {                            target.onProgressUpdate(95);                        } else {                            target.onProgressUpdate((int) num);                        }                    }                });                if (validateResponse(iw.getJsonObject())) {                    try{                        ijoomerCaching.cacheData(iw.getJsonObject().getJSONObject(MESSAGES),false, JBOLOMESSAGETABLENAME);                    }catch (Throwable e){                        e.printStackTrace();                    }                }                return null;            }            @Override            protected void onPostExecute(ArrayList<HashMap<String, String>> result) {                super.onPostExecute(result);                isCalling = false;                target.onProgressUpdate(100);                target.onCallComplete(getResponseCode(), getErrorMessage(), result, null);            }        }.execute();    }    /**     * This method used to send file.     * @param nId represented node id     * @param filePath represented file path     * @param target represented {@link com.ijoomer.weservice.WebCallListener}     */    public void sendFile(final String nId,final String filePath,final WebCallListener target) {        new AsyncTask<Void, Void, ArrayList<HashMap<String, String>>>() {            IjoomerCaching ijoomerCaching = new IjoomerCaching(mContext);            @Override            protected ArrayList<HashMap<String, String>> doInBackground(Void... params) {                IjoomerWebService iw = new IjoomerWebService();                iw.reset();                iw.addWSParam(EXTNAME, JBOLOCHAT);                iw.addWSParam(EXTVIEW, ICHATMAIN);                iw.addWSParam(EXTTASK, UPLOADFILE);                JSONObject taskData = new JSONObject();                try {                    taskData.put(NID, nId);                } catch (Throwable e) {                }                iw.addWSParam(TASKDATA, taskData);                iw.WSCall(FILES,filePath,new ProgressListener() {                    @Override                    public void transferred(long num) {                        if (num >= 100) {                            target.onProgressUpdate(95);                        } else {                            target.onProgressUpdate((int) num);                        }                    }                });                if (validateResponse(iw.getJsonObject())) {                    try{                        ijoomerCaching.parseData(iw.getJsonObject());                    }catch (Throwable e){                        e.printStackTrace();                    }                }                return null;            }            @Override            protected void onPostExecute(ArrayList<HashMap<String, String>> result) {                super.onPostExecute(result);                isCalling = false;                target.onProgressUpdate(100);                target.onCallComplete(getResponseCode(), getErrorMessage(), result, null);            }        }.execute();    }    /**     * This method used to get online user from database.     * @return represented {@link java.util.ArrayList< java.util.HashMap<String,String>}     */    public ArrayList<HashMap<String,String>> getOnlineUserDB(){        IjoomerCaching ijoomerCaching = new IjoomerCaching(mContext);        return ijoomerCaching.getDataFromCache(JBOLOONLINEUSERTABLENAME);    }    /**     * This method used to get message from database.     * @param nodeId represented node id     * @return represented {@link java.util.ArrayList< java.util.HashMap<String,String>}     */    public ArrayList<HashMap<String,String>> getMessageDB(String nodeId){        IjoomerCaching ijoomerCaching = new IjoomerCaching(mContext);        return ijoomerCaching.getDataFromCache(JBOLOMESSAGETABLENAME,"select * from "+ JBOLOMESSAGETABLENAME +" where nodeID='"+nodeId+"' order by cast(timestamp as number)");    }    /**     * This method used to clear conversions.     * @param nodeId represented node id     * @return represented {@link Boolean}     */    public boolean clearConversion(String nodeId) {        IjoomerCaching ijoomerCaching = new IjoomerCaching(mContext);        String query = "delete from " + JBOLOMESSAGETABLENAME + " where nodeID='" + nodeId + "'";        return  ijoomerCaching.deleteDataFromCache(query);    }    /**     * This method used to get chat history.     * @param nId represented node id     * @param target represented {@link com.ijoomer.weservice.WebCallListener}     */    public void getHistory(final String nId,final WebCallListener target) {        if (hasNextPage()) {            isCalling = true;            new AsyncTask<Void, Void, ArrayList<HashMap<String, String>>>() {                IjoomerCaching ijoomerCaching = new IjoomerCaching(mContext);                @Override                protected ArrayList<HashMap<String, String>> doInBackground(Void... params) {                    IjoomerWebService iw = new IjoomerWebService();                    iw.reset();                    iw.addWSParam(EXTNAME, JBOLOCHAT);                    iw.addWSParam(EXTVIEW, ICHATMAIN);                    iw.addWSParam(EXTTASK, CHATHISTORY);                    JSONObject taskData = new JSONObject();                    try {                        taskData.put(NID, nId);                        taskData.put(PAGENO, ""+ getPageNo());                    } catch (Throwable e) {                    }                    iw.addWSParam(TASKDATA, taskData);                    iw.WSCall(new ProgressListener() {                        @Override                        public void transferred(long num) {                            if (num >= 100) {                                target.onProgressUpdate(95);                            } else {                                target.onProgressUpdate((int) num);                            }                        }                    });                    if (validateResponse(iw.getJsonObject())) {                        try {                            setPagingParams(Integer.parseInt(iw.getJsonObject().getString(PAGELIMIT)), Integer.parseInt(iw.getJsonObject().getString(TOTAL)));                            iw.getJsonObject().remove(PAGELIMIT);                            iw.getJsonObject().remove(TOTAL);                            return ijoomerCaching.parseData(iw.getJsonObject());                        }catch (Throwable e){                            e.printStackTrace();                        }                    }                    return null;                }                @Override                protected void onPostExecute(ArrayList<HashMap<String, String>> result) {                    super.onPostExecute(result);                    isCalling = false;                    target.onProgressUpdate(100);                    target.onCallComplete(getResponseCode(), getErrorMessage(), result, null);                }            }.execute();        }  else {            target.onProgressUpdate(100);            target.onCallComplete(getResponseCode(), getErrorMessage(), null, null);        }    }    /**     * This method used to leave group.     * @param nId represented node id     * @param target represented {@link com.ijoomer.weservice.WebCallListener}     */    public void leavrGroup(final String nId,final WebCallListener target) {        if (hasNextPage()) {            isCalling = true;            new AsyncTask<Void, Void, ArrayList<HashMap<String, String>>>() {                IjoomerCaching ijoomerCaching = new IjoomerCaching(mContext);                @Override                protected ArrayList<HashMap<String, String>> doInBackground(Void... params) {                    IjoomerWebService iw = new IjoomerWebService();                    iw.reset();                    iw.addWSParam(EXTNAME, JBOLOCHAT);                    iw.addWSParam(EXTVIEW, ICHATMAIN);                    iw.addWSParam(EXTTASK, LEAVECHAT);                    JSONObject taskData = new JSONObject();                    try {                        taskData.put(NID, nId);                    } catch (Throwable e) {                    }                    iw.addWSParam(TASKDATA, taskData);                    iw.WSCall(new ProgressListener() {                        @Override                        public void transferred(long num) {                            if (num >= 100) {                                target.onProgressUpdate(95);                            } else {                                target.onProgressUpdate((int) num);                            }                        }                    });                    if (validateResponse(iw.getJsonObject())) {                        try {                            return ijoomerCaching.parseData(iw.getJsonObject());                        }catch (Throwable e){                            e.printStackTrace();                        }                    }                    return null;                }                @Override                protected void onPostExecute(ArrayList<HashMap<String, String>> result) {                    super.onPostExecute(result);                    isCalling = false;                    target.onProgressUpdate(100);                    target.onCallComplete(getResponseCode(), getErrorMessage(), result, null);                }            }.execute();        }  else {            target.onProgressUpdate(100);            target.onCallComplete(getResponseCode(), getErrorMessage(), null, null);        }    }    /**     * This method used to get group participants user.     * @param nId represented node id     * @param target represented {@link com.ijoomer.weservice.WebCallListener}     */    public void getGroupUser(final String nId,final WebCallListener target) {            new AsyncTask<Void, Void, ArrayList<HashMap<String, String>>>() {                IjoomerCaching ijoomerCaching = new IjoomerCaching(mContext);                @Override                protected ArrayList<HashMap<String, String>> doInBackground(Void... params) {                    IjoomerWebService iw = new IjoomerWebService();                    iw.reset();                    iw.addWSParam(EXTNAME, JBOLOCHAT);                    iw.addWSParam(EXTVIEW, ICHATMAIN);                    iw.addWSParam(EXTTASK, GETGROUPPARTICIPANTS);                    JSONObject taskData = new JSONObject();                    try {                        taskData.put(NID, nId);                        taskData.put(PAGENO, ""+ getPageNo());                    } catch (Throwable e) {                    }                    iw.addWSParam(TASKDATA, taskData);                    iw.WSCall(new ProgressListener() {                        @Override                        public void transferred(long num) {                            if (num >= 100) {                                target.onProgressUpdate(95);                            } else {                                target.onProgressUpdate((int) num);                            }                        }                    });                    if (validateResponse(iw.getJsonObject())) {                        try {                            return ijoomerCaching.parseData(iw.getJsonObject());                        }catch (Throwable e){                            e.printStackTrace();                        }                    }                    return null;                }                @Override                protected void onPostExecute(ArrayList<HashMap<String, String>> result) {                    super.onPostExecute(result);                    target.onProgressUpdate(100);                    target.onCallComplete(getResponseCode(), getErrorMessage(), result, null);                }            }.execute();    }    /**     * This method used to set status of login user.     * @param message represented status message     * @param status represented status {0-Available,1-Busy,2-Away}     * @param target represented {@link com.ijoomer.weservice.WebCallListener}     */    public void setStaus(final String message,final String status,final WebCallListener target) {        new AsyncTask<Void, Void, ArrayList<HashMap<String, String>>>() {            IjoomerCaching ijoomerCaching = new IjoomerCaching(mContext);            @Override            protected ArrayList<HashMap<String, String>> doInBackground(Void... params) {                IjoomerWebService iw = new IjoomerWebService();                iw.reset();                iw.addWSParam(EXTNAME, JBOLOCHAT);                iw.addWSParam(EXTVIEW, ICHATMAIN);                iw.addWSParam(EXTTASK, CHANGESTATUS);                JSONObject taskData = new JSONObject();                try {                    taskData.put(STATUS, status);                    taskData.put(STATUSMSG, message);                } catch (Throwable e) {                }                iw.addWSParam(TASKDATA, taskData);                iw.WSCall(new ProgressListener() {                    @Override                    public void transferred(long num) {                        if (num >= 100) {                            target.onProgressUpdate(95);                        } else {                            target.onProgressUpdate((int) num);                        }                    }                });                if (validateResponse(iw.getJsonObject())) {                    try {                        return ijoomerCaching.parseData(iw.getJsonObject());                    }catch (Throwable e){                        e.printStackTrace();                    }                }                return null;            }            @Override            protected void onPostExecute(ArrayList<HashMap<String, String>> result) {                super.onPostExecute(result);                isCalling = false;                target.onProgressUpdate(100);                target.onCallComplete(getResponseCode(), getErrorMessage(), result, null);            }        }.execute();    }}